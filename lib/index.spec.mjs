/* eslint-env jasmine */

// Jasmine can be configured to handle ES modules with .js extension,
// but naming this file .mjs is easier

import dehex from './dehex.js'
import SafeCodePoint from './index.js'

const numCodePoints = (1 << 16) + (1 << 20)
const getNumSafeCodePoints = safeCodePoint => {
  let numSafeCodePoints = 0
  for (let codePoint = 0; codePoint < numCodePoints; codePoint++) {
    if (safeCodePoint(codePoint)) {
      numSafeCodePoints++
    }
  }
  return numSafeCodePoints
}

describe('safe-code-point', () => {
  let scp7
  let scp8
  let scp9
  let scp10
  let scp11
  let scp12
  let scp13
  let scp17

  // First load some files
  beforeAll(async () => {
    scp7 = await SafeCodePoint('7.0.0')
  })
  beforeAll(async () => {
    scp8 = await SafeCodePoint('8.0.0')
  })
  beforeAll(async () => {
    scp9 = await SafeCodePoint('9.0.0')
  })
  beforeAll(async () => {
    scp10 = await SafeCodePoint('10.0.0')
  })
  beforeAll(async () => {
    scp11 = await SafeCodePoint('11.0.0')
  })
  beforeAll(async () => {
    scp12 = await SafeCodePoint('12.0.0')
  })
  beforeAll(async () => {
    scp13 = await SafeCodePoint('13.0.0')
  })
  beforeAll(async () => {
    scp17 = await SafeCodePoint('17.0.0')
  })

  describe('canonicalCombiningClass', () => {
    it('works', () => {
      expect(scp8.canonicalCombiningClass(0)).toBe(0)
      expect(scp8.canonicalCombiningClass(30)).toBe(0)
      expect(scp8.canonicalCombiningClass(parseInt('0345', 16))).toBe(240)
    })
  })

  describe('dehex', () => {
    it('works', () => {
      expect(dehex('0000')).toEqual([0])
      expect(dehex('0000..0002')).toEqual([0, 1, 2])
      expect(dehex('000A..000C')).toEqual([10, 11, 12])
    })
  })

  describe('eastAsianWidth', () => {
    it('works', () => {
      expect(scp8.eastAsianWidth(0)).toBe('N')
      expect(scp8.eastAsianWidth(0x001F)).toBe('N')
      expect(scp8.eastAsianWidth(0x0020)).toBe('Na')

      expect(scp9.eastAsianWidth(0x00F8)).toBe('A')
      expect(() => scp9.eastAsianWidth(0xABFF)).toThrow()

      expect(() => scp10.eastAsianWidth(0xE1000)).toThrow()
      expect(scp10.eastAsianWidth(0x30000)).toBe('W')
    })
  })

  describe('generalCategory', () => {
    it('works', () => {
      expect(scp9.generalCategory(0)).toBe('Cc')
      expect(scp9.generalCategory(31)).toBe('Cc')
      expect(scp9.generalCategory(parseInt('055A', 16))).toBe('Po')
    })
  })

  describe('normalizationProperties', () => {
    it('works', () => {
      expect(scp10.normalizationProperties(parseInt('037A', 16), 'FC_NFKC')).toBe('0020 03B9')
      expect(scp10.normalizationProperties(parseInt('E0002', 16), 'NFKC_CF')).toBe('')
      expect(scp10.normalizationProperties(parseInt('FB1D', 16), 'NFC_QC')).toBe('N')
      expect(scp10.normalizationProperties(parseInt('10FFFF', 16), 'NFKD_QC')).toBe('Y')
    })
  })

  describe('wordBreak', () => {
    it('works', () => {
      expect(() => scp13.wordBreak(-1)).toThrow()
      expect(scp13.wordBreak(parseInt('0000', 16))).toBeUndefined()
      expect(scp13.wordBreak(parseInt('0022', 16))).toBe('Double_Quote')
      expect(scp13.wordBreak(parseInt('0065', 16))).toBe('ALetter')
    })
  })

  describe('safeCodePoint', () => {
    it('works', () => {
      expect(scp12(0)).toBe(false)
      expect(scp12(36)).toBe(true)
      expect(scp12(65)).toBe(true)
    })

    it('README example', () => {
      expect(getNumSafeCodePoints(scp7)).toBe(93510)
      expect(getNumSafeCodePoints(scp8)).toBe(101064)
      expect(getNumSafeCodePoints(scp9)).toBe(108397)
      expect(getNumSafeCodePoints(scp10)).toBe(116813)
      expect(getNumSafeCodePoints(scp11)).toBe(117422)
      expect(getNumSafeCodePoints(scp12)).toBe(117927)
    })
  })

  describe('base65536', () => {
    it('works', () => {
      const safeRange = (min, max) => {
        for (let codePoint = min; codePoint < max; codePoint++) {
          if (scp8.generalCategory(codePoint) !== 'Lo' || !scp8(codePoint)) {
            return false
          }
        }
        return true
      }

      const getAllSafeRanges = rangeSize => {
        const allSafeRanges = []
        for (let codePoint = 0; codePoint < (1 << 16) + (1 << 20); codePoint += rangeSize) {
          if (safeRange(codePoint, codePoint + rangeSize)) {
            allSafeRanges.push(codePoint)
          }
        }
        return allSafeRanges
      }

      const allSafeRanges = getAllSafeRanges(1 << 8)

      const paddingBlockStart = String.fromCodePoint(allSafeRanges.shift())
      expect(paddingBlockStart).toBe('сФА')

      const blockStarts = allSafeRanges.slice(0, 1 << 8).map(x => String.fromCodePoint(x)).join('')
      expect(blockStarts).toBe(
        'уРАуФАуШАуЬАуаАудАуиАумАу░Ау┤Ау╕Ау╝АфААфДАфИАфМА' +
        'фРАфФАфШАфЬАфаАфдАфиАфмАф░Аф╕Аф╝АхААхДАхИАхМАхРА' +
        'хФАхШАхЬАхаАхдАхиАхмАх░Ах┤Ах╕Ах╝АцААцДАцИАцМАцРА' +
        'цФАцШАцЬАцаАцдАциАцмАц░Ац┤Ац╕Ац╝АчААчДАчИАчМАчРА' +
        'чФАчШАчЬАчаАчдАчиАчмАч░Ач┤Ач╕Ач╝АшААшДАшИАшМАшРА' +
        'шФАшШАшЬАшаАшдАшиАшмАш░Аш┤Аш╕Аш╝АщААщДАщИАщМАщРА' +
        'щФАщШАщЬАщаАщдАщиАщмАщ░Ащ┤Ащ╕АъДАъИАъМАъФАЁРШАЁТАА' +
        'ЁТДАЁТИАЁУААЁУДАЁУИАЁУМАЁФРАЁФФАЁЦаАЁЦдАЁаААЁаДАЁаИАЁаМАЁаРАЁаФА' +
        'ЁаШАЁаЬАЁааАЁадАЁаиАЁамАЁа░АЁа┤АЁа╕АЁа╝АЁбААЁбДАЁбИАЁбМАЁбРАЁбФА' +
        'ЁбШАЁбЬАЁбаАЁбдАЁбиАЁбмАЁб░АЁб┤АЁб╕АЁб╝АЁвААЁвДАЁвИАЁвМАЁвРАЁвФА' +
        'ЁвШАЁвЬАЁваАЁвдАЁвиАЁвмАЁв░АЁв┤АЁв╕АЁв╝АЁгААЁгДАЁгИАЁгМАЁгРАЁгФА' +
        'ЁгШАЁгЬАЁгаАЁгдАЁгиАЁгмАЁг░АЁг┤АЁг╕АЁг╝АЁдААЁдДАЁдИАЁдМАЁдРАЁдФА' +
        'ЁдШАЁдЬАЁдаАЁддАЁдиАЁдмАЁд░АЁд┤АЁд╕АЁд╝АЁеААЁеДАЁеИАЁеМАЁеРАЁеФА' +
        'ЁеШАЁеЬАЁеаАЁедАЁеиАЁемАЁе░АЁе┤АЁе╕АЁе╝АЁжААЁжДАЁжИАЁжМАЁжРАЁжФА' +
        'ЁжШАЁжЬАЁжаАЁждАЁжиАЁжмАЁж░АЁж┤АЁж╕АЁж╝АЁзААЁзДАЁзИАЁзМАЁзРАЁзФА' +
        'ЁзШАЁзЬАЁзаАЁздАЁзиАЁзмАЁз░АЁз┤АЁз╕АЁз╝АЁиААЁиДАЁиИАЁиМАЁиРАЁиФА'
      )

      // Check East_Asian_Width properties. Each block of 256 characters
      // has the same East_Asian_Width property. 243 of the blocks are 'W' (wide),
      // the other 13 + 1 are 'N' (neutral, which in effect is narrow).
      // This is significant when considering rendering and wrapping.
      const allBlockStarts = [...blockStarts].map(x => x.codePointAt(0))
      const neutralBlockStarts = [...'сФАъФАЁРШАЁТААЁТДАЁТИАЁУААЁУДАЁУИАЁУМАЁФРАЁФФАЁЦаАЁЦдА'].map(x => x.codePointAt(0))
      allBlockStarts.forEach(blockStart => {
        for (let i = 0; i < 1 << 8; i++) {
          const codePoint = blockStart + i
          const isInNeutralBlock = neutralBlockStarts
            .some(neutralBlockStart => neutralBlockStart <= codePoint && codePoint < neutralBlockStart + (1 << 8))
          expect(scp8.eastAsianWidth(codePoint)).toBe(isInNeutralBlock ? 'N' : 'W')
        }
      })
    })
  })

  describe('base32768', () => {
    it('works', () => {
      const safeRange = function (min, max) {
        for (let codePoint = min; codePoint < max; codePoint++) {
          if (!scp9(codePoint)) {
            return false
          }
        }
        return true
      }

      const getAllSafeRanges = rangeSize => {
        const allSafeRanges = []
        for (let codePoint = 0; codePoint < (1 << 16) + (1 << 20); codePoint += rangeSize) {
          if (safeRange(codePoint, codePoint + rangeSize)) {
            allSafeRanges.push(codePoint)
          }
        }
        return allSafeRanges
      }

      const rangeSize = 5
      const allSafeRanges = getAllSafeRanges(1 << rangeSize)

      const repertoireSizes = []
      for (let i = 15; i > 0; i -= 8) { // Base32768 is a 15-bit encoding of 8-bit binary data
        repertoireSizes.unshift(i - rangeSize)
      }

      const repertoireOffsets = repertoireSizes
        .map(x => 1 << x)
        .map((x, i, arr) => x + (i === 0 ? 0 : arr[i - 1])) // cumulative sum
        .map((offset, i, arr) => allSafeRanges
          .slice(i === 0 ? 0 : arr[i - 1], arr[i])
          .map(x => String.fromCodePoint(x))
          .join('')
        )
        .reverse()

      expect(repertoireOffsets).toEqual([
        '╥а╘А┌А┌а▌а▐А▀АсААсВасДАсДасЕАсЖАсЗасИАсИасЙасЛасМасОасПАсРасСАсСасТАсТасУАсУасФАсФасХАсХасЦАсЦасЧАсЧасШАсШасЩАсЪасЫАсЮАсаасбАсгАсжАсзасиаспАс░Ас┤АтЗатЛАтНАтНатОАтОатПАтРАтФАтФатХАтХатЦАтЦатЧАтЧатШАтШатЩАтЩатЪАтЪатЫАтЫатЬАтЬатЭАтЮАтЮатаАтаатбАтбатвАтватгАтгатдАтдатеАтеатжатиатйАткАткатлатмАтматнАт░Ат▓Ат▓ат│Ат┤Ат╡Ат║ат╗АуЗАуРАуРауСАуСауТАуТауУАуУауФАуФауХАуХауЦАуЦауЧАуЧауШАуШауЩАуЩауЪАуЪауЫАуЫауЬАуЬауЭАуЭауЮАуЮауЯАуЯауаАуааубАубаувАуваугАугаудАудауеАуеаужАужаузАузауиАуиауйАуйаукАукаулАулаумАумаунАунауоАуоаупАупау░Ау░ау▒Ау▒ау▓Ау▓ау│Ау│ау┤Ау┤ау╡Ау╡ау╢Ау╢ау╖Ау╖ау╕Ау╕ау╣Ау╣ау║Ау║ау╗Ау╗ау╝Ау╝ау╜Ау╜ау╛Ау╛ау┐Ау┐афААфАафБАфБафВАфВафГАфГафДАфДафЕАфЕафЖАфЖафЗАфЗафИАфИафЙАфЙафКАфКафЛАфЛафМАфМафНАфНафОАфОафПАфПафРАфРафСАфСафТАфТафУАфУафФАфФафХАфХафЦАфЦафЧАфЧафШАфШафЩАфЩафЪАфЪафЫАфЫафЬАфЬафЭАфЭафЮАфЮафЯАфЯафаАфаафбАфбафвАфвафгАфгафдАфдафеАфеафжАфжафзАфзафиАфиафйАфйафкАфкафлАфлафмАфмафнАфнафоАфоафпАфпаф░Аф░аф▒Аф▒аф▓Аф▓аф│Аф│аф┤Аф┤аф╡Аф╡аф╢Аф╖Аф╖аф╕Аф╕аф╣Аф╣аф║Аф║аф╗Аф╗аф╝Аф╝аф╜Аф╜аф╛Аф╛аф┐Аф┐ахААхАахБАхБахВАхВахГАхГахДАхДахЕАхЕахЖАхЖахЗАхЗахИАхИахЙАхЙахКАхКахЛАхЛахМАхМахНАхНахОАхОахПАхПахРАхРахСАхСахТАхТахУАхУахФАхФахХАхХахЦАхЦахЧАхЧахШАхШахЩАхЩахЪАхЪахЫАхЫахЬАхЬахЭАхЭахЮАхЮахЯАхЯахаАхаахбАхбахвАхвахгАхгахдАхдахеАхеахжАхжахзАхзахиАхиахйАхйахкАхкахлАхлахмАхмахнАхнахоАхоахпАхпах░Ах░ах▒Ах▒ах▓Ах▓ах│Ах│ах┤Ах┤ах╡Ах╡ах╢Ах╢ах╖Ах╖ах╕Ах╕ах╣Ах╣ах║Ах║ах╗Ах╗ах╝Ах╝ах╜Ах╜ах╛Ах╛ах┐Ах┐ацААцАацБАцБацВАцВацГАцГацДАцДацЕАцЕацЖАцЖацЗАцЗацИАцИацЙАцЙацКАцКацЛАцЛацМАцМацНАцНацОАцОацПАцПацРАцРацСАцСацТАцТацУАцУацФАцФацХАцХацЦАцЦацЧАцЧацШАцШацЩАцЩацЪАцЪацЫАцЫацЬАцЬацЭАцЭацЮАцЮацЯАцЯацаАцаацбАцбацвАцвацгАцгацдАцдацеАцеацжАцжацзАцзациАциацйАцйацкАцкацлАцлацмАцмацнАцнацоАцоацпАцпац░Ац░ац▒Ац▒ац▓Ац▓ац│Ац│ац┤Ац┤ац╡Ац╡ац╢Ац╢ац╖Ац╖ац╕Ац╕ац╣Ац╣ац║Ац║ац╗Ац╗ац╝Ац╝ац╜Ац╜ац╛Ац╛ац┐Ац┐ачААчАачБАчБачВАчВачГАчГачДАчДачЕАчЕачЖАчЖачЗАчЗачИАчИачЙАчЙачКАчКачЛАчЛачМАчМачНАчНачОАчОачПАчПачРАчРачСАчСачТАчТачУАчУачФАчФачХАчХачЦАчЦачЧАчЧачШАчШачЩАчЩачЪАчЪачЫАчЫачЬАчЬачЭАчЭачЮАчЮачЯАчЯачаАчаачбАчбачвАчвачгАчгачдАчдачеАчеачжАчжачзАчзачиАчиачйАчйачкАчкачлАчлачмАчмачнАчначоАчоачпАчпач░Ач░ач▒Ач▒ач▓Ач▓ач│Ач│ач┤Ач┤ач╡Ач╡ач╢Ач╢ач╖Ач╖ач╕Ач╕ач╣Ач╣ач║Ач║ач╗Ач╗ач╝Ач╝ач╜Ач╜ач╛Ач╛ач┐Ач┐ашААшАашБАшБашВАшВашГАшГашДАшДашЕАшЕашЖАшЖашЗАшЗашИАшИашЙАшЙашКАшКашЛАшЛашМАшМашНАшНашОАшОашПАшПашРАшРашСАшСашТАшТашУАшУашФАшФашХАшХашЦАшЦашЧАшЧашШАшШашЩАшЩашЪАшЪашЫАшЫашЬАшЬашЭАшЭашЮАшЮашЯАшЯашаАшаашбАшбашвАшвашгАшгашдАшдашеАшеашжАшжашзАшзашиАшиашйАшйашкАшкашлАшлашмАшмашнАшнашоАшоашпАшпаш░Аш░аш▒Аш▒аш▓Аш▓аш│Аш│аш┤Аш┤аш╡Аш╡аш╢Аш╢аш╖Аш╖аш╕Аш╕аш╣Аш╣аш║Аш║аш╗Аш╗аш╝Аш╝аш╜Аш╜аш╛Аш╛аш┐Аш┐ащААщАащБАщБащВАщВащГАщГащДАщДащЕАщЕащЖАщЖащЗАщЗащИАщИащЙАщЙащКАщКащЛАщЛащМАщМащНАщНащОАщОащПАщПащРАщРащСАщСащТАщТащУАщУащФАщФащХАщХащЦАщЦащЧАщЧащШАщШащЩАщЩащЪАщЪащЫАщЫащЬАщЬащЭАщЭащЮАщЮащЯАщЯащаАщаащбАщбащвАщващгАщгащдАщдащеАщеащжАщжащзАщзащиАщиащйАщйащкАщкащлАщлащмАщмащнАщнащоАщоащпАщпащ░Ащ░ащ▒Ащ▒ащ▓Ащ▓ащ│Ащ│ащ┤Ащ┤ащ╡Ащ╡ащ╢Ащ╢ащ╖Ащ╖ащ╕Ащ╕ащ╣Ащ╣ащ║Ащ║ащ╗Ащ╗ащ╝Ащ╝ащ╜Ащ╜ащ╛Ащ╛аъААъАаъБАъБаъВАъВаъГАъГаъДАъДаъЕАъЕаъЖАъЖаъЗАъЗаъИАъИаъЙАъЙаъКАъКаъЛАъЛаъМАъМаъНАъНаъОАъОаъПАъПаъРАъРаъСАъСаъТаъФАъФаъХАъХаъЦАъЦаъЧАъЧаъЩАъЪаъЫАъЬАъЬаъЭАъЮАъбА',
        '╞А╔А╔а╩А'
      ])
    })
  })

  describe('base2048', () => {
    it('works', () => {
      const repertoireSizes = []
      for (let i = 11; i > 0; i -= 8) { // Base2048 is an 11-bit encoding of 8-bit binary data
        repertoireSizes.unshift(1 << i)
      }

      let codePoint = 0
      const repertoires = repertoireSizes
        .map(repertoireSize => {
          const codePoints = []
          while (codePoints.length < repertoireSize) {
            if (
              scp10(codePoint) &&
              !scp10.generalCategory(codePoint).startsWith('S') &&
              scp10.generalCategory(codePoint) !== 'Lm'
            ) {
              codePoints.push(codePoint)
            }
            codePoint++
          }
          return codePoints
        })
        .map(codePoints => codePoints.map(x => String.fromCodePoint(x)).join(''))
        .reverse()

      expect(repertoires).toEqual([
        '89ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz├Ж├Р├Ш├Ю├Я├ж├░├╕├╛─Р─С─ж─з─▒─╕┼Б┼В┼К┼Л┼Т┼У┼ж┼з╞А╞Б╞В╞Г╞Д╞Е╞Ж╞З╞И╞Й╞К╞Л╞М╞Н╞О╞П╞Р╞С╞Т╞У╞Ф╞Х╞Ц╞Ч╞Ш╞Щ╞Ъ╞Ы╞Ь╞Э╞Ю╞Я╞в╞г╞д╞е╞ж╞з╞и╞й╞к╞л╞м╞н╞о╞▒╞▓╞│╞┤╞╡╞╢╞╖╞╕╞╣╞║╞╗╞╝╞╜╞╛╞┐╟А╟Б╟В╟Г╟Э╟д╟е╟╢╟╖╚Ь╚Э╚а╚б╚в╚г╚д╚е╚┤╚╡╚╢╚╖╚╕╚╣╚║╚╗╚╝╚╜╚╛╚┐╔А╔Б╔В╔Г╔Д╔Е╔Ж╔З╔И╔Й╔К╔Л╔М╔Н╔О╔П╔Р╔С╔Т╔У╔Ф╔Х╔Ц╔Ч╔Ш╔Щ╔Ъ╔Ы╔Ь╔Э╔Ю╔Я╔а╔б╔в╔г╔д╔е╔ж╔з╔и╔й╔к╔л╔м╔н╔о╔п╔░╔▒╔▓╔│╔┤╔╡╔╢╔╖╔╕╔╣╔║╔╗╔╝╔╜╔╛╔┐╩А╩Б╩В╩Г╩Д╩Е╩Ж╩З╩И╩Й╩К╩Л╩М╩Н╩О╩П╩Р╩С╩Т╩У╩Ф╩Х╩Ц╩Ч╩Ш╩Щ╩Ъ╩Ы╩Ь╩Э╩Ю╩Я╩а╩б╩в╩г╩д╩е╩ж╩з╩и╩й╩к╩л╩м╩н╩о╩п═░═▒═▓═│═╢═╖═╗═╝═╜═┐╬С╬Т╬У╬Ф╬Х╬Ц╬Ч╬Ш╬Щ╬Ъ╬Ы╬Ь╬Э╬Ю╬Я╬а╬б╬г╬д╬е╬ж╬з╬и╬й╬▒╬▓╬│╬┤╬╡╬╢╬╖╬╕╬╣╬║╬╗╬╝╬╜╬╛╬┐╧А╧Б╧В╧Г╧Д╧Е╧Ж╧З╧И╧Й╧П╧Ч╧Ш╧Щ╧Ъ╧Ы╧Ь╧Э╧Ю╧Я╧а╧б╧в╧г╧д╧е╧ж╧з╧и╧й╧к╧л╧м╧н╧о╧п╧│╧╖╧╕╧║╧╗╧╝╧╜╧╛╧┐╨В╨Д╨Е╨Ж╨И╨Й╨К╨Л╨П╨Р╨С╨Т╨У╨Ф╨Х╨Ц╨Ч╨Ш╨Ъ╨Ы╨Ь╨Э╨Ю╨Я╨а╨б╨в╨г╨д╨е╨ж╨з╨и╨й╨к╨л╨м╨н╨о╨п╨░╨▒╨▓╨│╨┤╨╡╨╢╨╖╨╕╨║╨╗╨╝╨╜╨╛╨┐╤А╤Б╤В╤Г╤Д╤Е╤Ж╤З╤И╤Й╤К╤Л╤М╤Н╤О╤П╤Т╤Ф╤Х╤Ц╤Ш╤Щ╤Ъ╤Ы╤Я╤а╤б╤в╤г╤д╤е╤ж╤з╤и╤й╤к╤л╤м╤н╤о╤п╤░╤▒╤▓╤│╤┤╤╡╤╕╤╣╤║╤╗╤╝╤╜╤╛╤┐╥А╥Б╥К╥Л╥М╥Н╥О╥П╥Р╥С╥Т╥У╥Ф╥Х╥Ц╥Ч╥Ш╥Щ╥Ъ╥Ы╥Ь╥Э╥Ю╥Я╥а╥б╥в╥г╥д╥е╥ж╥з╥и╥й╥к╥л╥м╥н╥о╥п╥░╥▒╥▓╥│╥┤╥╡╥╢╥╖╥╕╥╣╥║╥╗╥╝╥╜╥╛╥┐╙А╙Г╙Д╙Е╙Ж╙З╙И╙Й╙К╙Л╙М╙Н╙О╙П╙Ф╙Х╙Ш╙Щ╙а╙б╙и╙й╙╢╙╖╙║╙╗╙╝╙╜╙╛╙┐╘А╘Б╘В╘Г╘Д╘Е╘Ж╘З╘И╘Й╘К╘Л╘М╘Н╘О╘П╘Р╘С╘Т╘У╘Ф╘Х╘Ц╘Ч╘Ш╘Щ╘Ъ╘Ы╘Ь╘Э╘Ю╘Я╘а╘б╘в╘г╘д╘е╘ж╘з╘и╘й╘к╘л╘м╘н╘о╘п╘▒╘▓╘│╘┤╘╡╘╢╘╖╘╕╘╣╘║╘╗╘╝╘╜╘╛╘┐╒А╒Б╒В╒Г╒Д╒Е╒Ж╒З╒И╒Й╒К╒Л╒М╒Н╒О╒П╒Р╒С╒Т╒У╒Ф╒Х╒Ц╒б╒в╒г╒д╒е╒ж╒з╒и╒й╒к╒л╒м╒н╒о╒п╒░╒▒╒▓╒│╒┤╒╡╒╢╒╖╒╕╒╣╒║╒╗╒╝╒╜╒╛╒┐╓А╓Б╓В╓Г╓Д╓Е╓Ж╫Р╫С╫Т╫У╫Ф╫Х╫Ц╫Ч╫Ш╫Щ╫Ъ╫Ы╫Ь╫Э╫Ю╫Я╫а╫б╫в╫г╫д╫е╫ж╫з╫и╫й╫к╫░╫▒╫▓╪а╪б╪з╪и╪й╪к╪л╪м╪н╪о╪п╪░╪▒╪▓╪│╪┤╪╡╪╢╪╖╪╕╪╣╪║╪╗╪╝╪╜╪╛╪┐┘Б┘В┘Г┘Д┘Е┘Ж┘З┘И┘Й┘К┘а┘б┘в┘г┘д┘е┘ж┘з┘и┘й┘о┘п┘▒┘▓┘│┘┤┘╣┘║┘╗┘╝┘╜┘╛┘┐┌А┌Б┌В┌Г┌Д┌Е┌Ж┌З┌И┌Й┌К┌Л┌М┌Н┌О┌П┌Р┌С┌Т┌У┌Ф┌Х┌Ц┌Ч┌Ш┌Щ┌Ъ┌Ы┌Ь┌Э┌Ю┌Я┌а┌б┌в┌г┌д┌е┌ж┌з┌и┌й┌к┌л┌м┌н┌о┌п┌░┌▒┌▓┌│┌┤┌╡┌╢┌╖┌╕┌╣┌║┌╗┌╝┌╜┌╛┌┐█Б█Г█Д█Е█Ж█З█И█Й█К█Л█М█Н█О█П█Р█С█Т█Х█о█п█░█▒█▓█│█┤█╡█╢█╖█╕█╣█║█╗█╝█┐▄Р▄Т▄У▄Ф▄Х▄Ц▄Ч▄Ш▄Щ▄Ъ▄Ы▄Ь▄Э▄Ю▄Я▄а▄б▄в▄г▄д▄е▄ж▄з▄и▄й▄к▄л▄м▄н▄о▄п▌Н▌О▌П▌Р▌С▌Т▌У▌Ф▌Х▌Ц▌Ч▌Ш▌Щ▌Ъ▌Ы▌Ь▌Э▌Ю▌Я▌а▌б▌в▌г▌д▌е▌ж▌з▌и▌й▌к▌л▌м▌н▌о▌п▌░▌▒▌▓▌│▌┤▌╡▌╢▌╖▌╕▌╣▌║▌╗▌╝▌╜▌╛▌┐▐А▐Б▐В▐Г▐Д▐Е▐Ж▐З▐И▐Й▐К▐Л▐М▐Н▐О▐П▐Р▐С▐Т▐У▐Ф▐Х▐Ц▐Ч▐Ш▐Щ▐Ъ▐Ы▐Ь▐Э▐Ю▐Я▐а▐б▐в▐г▐д▐е▐▒▀А▀Б▀В▀Г▀Д▀Е▀Ж▀З▀И▀Й▀К▀Л▀М▀Н▀О▀П▀Р▀С▀Т▀У▀Ф▀Х▀Ц▀Ч▀Ш▀Щ▀Ъ▀Ы▀Ь▀Э▀Ю▀Я▀а▀б▀в▀г▀д▀е▀ж▀з▀и▀й▀краАраБраВраГраДраЕраЖраЗраИраЙраКраЛраМраНраОраПраРраСраТраУраФраХрбАрбБрбВрбГрбДрбЕрбЖрбЗрбИрбЙрбКрбЛрбМрбНрбОрбПрбРрбСрбТрбУрбФрбХрбЦрбЧрбШрбарббрбврбгрбдрбербжрбзрбирбйрбкрварвбрвврвгрвдрвервжрвзрвирвйрвкрвлрвмрвнрворвпрв░рв▒рв▓рв│рв┤рв╢рв╖рв╕рв╣рв║рв╗рв╝рв╜рдДрдЕрдЖрдЗрдИрдЙрдКрдЛрдМрдНрдОрдПрдРрдСрдТрдУрдФрдХрдЦрдЧрдШрдЩрдЪрдЫрдЬрдЭрдЮрдЯрдардбрдврдгрддрдерджрдзрдирдкрдлрдмрднрдордпрд░рд▓рд│рд╡рд╢рд╖рд╕рд╣рд╜реРреаребрежрезреирейрекрелремренреорепре▓ре│ре┤ре╡ре╢ре╖ре╕ре╣ре║ре╗ре╝ре╜ре╛ре┐ржАржЕржЖржЗржИржЙржКржЛржМржПржРржУржФржХржЦржЧржШржЩржЪржЫржЬржЭржЮржЯржаржбржвржгрждржержжржзржиржкржлржмржнржоржпрж░рж▓рж╢рж╖рж╕рж╣рж╜рзОрзарзбрзжрззрзирзйрзкрзлрзмрзнрзорзпрз░рз▒рз┤рз╡рз╢рз╖рз╕рз╣рз╝риЕриЖриЗриИриЙриКриПриРриУриФриХриЦриЧриШриЩриЪриЫриЬриЭриЮриЯриарибривригридриерижризриирикрилримринриорипри░ри▓ри╡ри╕ри╣рйЬрйжрйзрйирййрйкрйлрймрйнрйорйпрй▓рй│рй┤ркЕркЖркЗркИркЙркКркЛркМркНркПркРркСркУркФркХркЦркЧркШркЩркЪркЫркЬркЭркЮркЯркаркбрквркгркдркеркжркзркирккрклркмркнркоркпрк░рк▓рк│рк╡рк╢рк╖рк╕рк╣рк╜рлРрларлбрлжрлзрлирлйрлкрллрлмрлнрлорлпрл╣рмЕрмЖрмЗрмИрмЙрмКрмЛрмМрмПрмРрмУрмФрмХрмЦрмЧрмШрмЩрмЪрмЫрмЬрмЭрмЮрмЯрмармбрмврмгрмдрмермжрмзрмирмкрмлрммрмнрмормпрм░рм▓рм│рм╡рм╢рм╖рм╕рм╣рм╜рнЯрнарнбрнжрнзрнирнйрнкрнлрнмрннрнорнпрн▒рн▓рн│рн┤рн╡рн╢рн╖роГроЕроЖроЗроИроЙроКроОроПроРроТроУроХроЩроЪроЬроЮроЯрогродроиройрокрооропро░ро▒ро▓ро│ро┤ро╡ро╢ро╖ро╕ро╣рпРрпжрпзрпирпйрпкрплрпмрпнрпорппрп░рп▒рп▓р░Ер░Жр░Зр░Ир░Йр░Кр░Лр░Мр░Ор░Пр░Рр░Тр░Ур░Фр░Хр░Цр░Чр░Шр░Щр░Ър░Ыр░Ьр░Эр░Юр░Яр░ар░бр░вр░гр░др░ер░жр░зр░ир░кр░лр░мр░нр░ор░пр░░р░▒р░▓р░│р░┤р░╡р░╢р░╖р░╕р░╣р░╜р▒Шр▒Щр▒Ър▒ар▒бр▒жр▒зр▒ир▒йр▒кр▒лр▒мр▒нр▒ор▒пр▒╕р▒╣р▒║р▒╗р▒╝р▒╜р▒╛р▓Ар▓Ер▓Жр▓Зр▓Ир▓Йр▓Кр▓Лр▓Мр▓Ор▓Пр▓Рр▓Тр▓Ур▓Фр▓Хр▓Цр▓Чр▓Шр▓Щр▓Ър▓Ыр▓Ьр▓Эр▓Юр▓Яр▓ар▓бр▓вр▓гр▓др▓ер▓жр▓зр▓ир▓кр▓лр▓мр▓нр▓ор▓пр▓░р▓▒р▓▓р▓│р▓╡р▓╢р▓╖р▓╕р▓╣р▓╜р│Юр│ар│бр│жр│зр│ир│йр│кр│лр│мр│нр│ор│пр│▒р│▓р┤Ер┤Жр┤Зр┤Ир┤Йр┤Кр┤Лр┤Мр┤Ор┤Пр┤Рр┤Тр┤Ур┤Фр┤Хр┤Цр┤Чр┤Шр┤Щр┤Ър┤Ыр┤Ьр┤Эр┤Юр┤Яр┤ар┤бр┤вр┤гр┤др┤ер┤жр┤зр┤ир┤йр┤кр┤лр┤мр┤нр┤ор┤пр┤░р┤▒р┤▓р┤│р┤┤р┤╡р┤╢р┤╖р┤╕р┤╣р┤║р┤╜р╡Ор╡Фр╡Хр╡Цр╡Шр╡Щр╡Ър╡Ыр╡Ьр╡Эр╡Юр╡Яр╡ар╡бр╡жр╡зр╡ир╡йр╡кр╡лр╡мр╡нр╡ор╡пр╡░р╡▒р╡▓р╡│р╡┤р╡╡р╡╢р╡╖р╡╕р╡║р╡╗р╡╝р╡╜р╡╛р╡┐р╢Ер╢Жр╢Зр╢Ир╢Йр╢Кр╢Лр╢Мр╢Нр╢Ор╢Пр╢Рр╢Ср╢Тр╢Ур╢Фр╢Хр╢Цр╢Ър╢Ыр╢Ьр╢Эр╢Юр╢Яр╢ар╢бр╢вр╢гр╢др╢ер╢жр╢зр╢ир╢йр╢кр╢лр╢мр╢нр╢ор╢пр╢░р╢▒р╢│р╢┤р╢╡р╢╢р╢╖р╢╕р╢╣р╢║р╢╗р╢╜р╖Ар╖Бр╖Вр╖Гр╖Др╖Ер╖Жр╖жр╖зр╖ир╖йр╖кр╖лр╖мр╖нр╖ор╖пр╕Бр╕Вр╕Гр╕Др╕Ер╕Жр╕Зр╕Ир╕Йр╕Кр╕Лр╕Мр╕Нр╕Ор╕Пр╕Рр╕Ср╕Тр╕Ур╕Фр╕Хр╕Цр╕Чр╕Шр╕Щр╕Ър╕Ыр╕Ьр╕Эр╕Юр╕Яр╕ар╕бр╕вр╕гр╕др╕ер╕жр╕зр╕ир╕йр╕кр╕лр╕мр╕нр╕ор╕пр╕░р╕▓р╣Ар╣Бр╣Вр╣Гр╣Др╣Ер╣Рр╣Ср╣Тр╣Ур╣Фр╣Хр╣Цр╣Чр╣Шр╣Щр║Бр║Вр║Др║Зр║Ир║Кр║Нр║Фр║Хр║Цр║Чр║Щр║Ър║Ыр║Ьр║Эр║Юр║Яр║бр║вр║гр║ер║зр║кр║лр║нр║ор║пр║░р║▓р║╜р╗Ар╗Бр╗Вр╗Гр╗Др╗Рр╗Ср╗Тр╗Ур╗Фр╗Хр╗Цр╗Чр╗Шр╗Щр╗Юр╗Яр╝Ар╝ар╝бр╝вр╝гр╝др╝ер╝жр╝зр╝ир╝йр╝кр╝лр╝мр╝нр╝ор╝пр╝░р╝▒р╝▓р╝│р╜Ар╜Бр╜Вр╜Др╜Ер╜Жр╜Зр╜Йр╜Кр╜Лр╜Мр╜Ор╜Пр╜Рр╜Ср╜Ур╜Фр╜Хр╜Цр╜Шр╜Щр╜Ър╜Ыр╜Эр╜Юр╜Яр╜ар╜бр╜вр╜гр╜др╜ер╜жр╜зр╜ир╜кр╜лр╜мр╛Ир╛Йр╛Кр╛Лр╛МсААсАБсАВсАГсАДсАЕсАЖсАЗсАИсАЙсАКсАЛсАМсАНсАОсАПсАРсАСсАТсАУсАФсАХсАЦсАЧсАШсАЩсАЪсАЫсАЬсАЭсАЮсАЯсАасАбсАвсАгсАдсАесАзсАисАйсАксА┐сБАсББсБВсБГсБДсБЕсБЖсБЗсБИсБЙсБРсБСсБТсБУсБФсБХ',
        '01234567'
      ])
    })
  })

  describe('base2e15', () => {
    it('is not safe', () => {
      const repertoires = [
        [0x3480, 0x4DB6],
        [0x4E00, 0x8926],
        [0xAC00, 0xD7A4],
        [0x3400, 0x3480]
      ]
      const badGc = []
      const badCcc = []
      const badNfdQc = []
      const badNfkdQc = []
      repertoires.forEach(repertoire => {
        for (let i = repertoire[0]; i < repertoire[1]; i++) {
          if (scp10.generalCategory(i) !== 'Lo') {
            badGc.push(i)
          }
          if (scp10.canonicalCombiningClass(i) !== 0) {
            badCcc.push(i)
          }
          if (scp10.normalizationProperties(i, 'NFD_QC') !== 'Y') {
            badNfdQc.push(i)
          }
          if (scp10.normalizationProperties(i, 'NFKD_QC') !== 'Y') {
            badNfkdQc.push(i)
          }
        }
      })
      expect(badGc).toEqual([])
      expect(badCcc).toEqual([])
      expect(badNfdQc.length).toBe(11172)
      expect(badNfkdQc.length).toBe(11172)
    })
  })

  describe('base32k', () => {
    it('is not safe', () => {
      const lanes = [
        [0x4000, 0xA000],
        [0xB000, 0xD000]
      ]
      const badNfdQc = []
      const badNfkdQc = []
      lanes.forEach(lane => {
        for (let i = lane[0]; i < lane[1]; i++) {
          if (scp10.normalizationProperties(i, 'NFD_QC') !== 'Y') {
            badNfdQc.push(i)
          }
          if (scp10.normalizationProperties(i, 'NFKD_QC') !== 'Y') {
            badNfkdQc.push(i)
          }
        }
      })
      expect(badNfdQc.length).toBe(8192)
      expect(badNfkdQc.length).toBe(8192)
    })
  })

  describe('14', () => {
    it('works', async () => {
      const scp14 = await SafeCodePoint('14.0.0')
      const numCodePoints = (1 << 16) + (1 << 20)
      let numAssigned = 0
      let numSafe = 0
      let numSafeLetter = 0
      let numSafeLetterOther = 0
      for (let codePoint = 0; codePoint < numCodePoints; codePoint++) {
        const gc = scp14.generalCategory(codePoint)
        if (gc !== 'Cn') {
          numAssigned++
          if (scp14(codePoint)) {
            numSafe++
            if (gc.startsWith('L')) {
              numSafeLetter++
              if (gc === 'Lo') {
                numSafeLetterOther++
              }
            }
          }
        }
      }
      expect(numAssigned).toBe(284278)
      expect(numSafe).toBe(124456)
      expect(numSafeLetter).toBe(116231)
      expect(numSafeLetterOther).toBe(113876)
    })
  })

  describe('safeCategories', () => {
    it('works', async () => {
      const scp17WithNothingSafe = await SafeCodePoint('17.0.0', { safeCategories: {} })
      const scp17WithEverythingSafe = await SafeCodePoint('17.0.0', { safeCategories: new Proxy({}, { get (_, prop) { return true } }) })

      const numSafeCodePoints17 = getNumSafeCodePoints(scp17)
      const numSafeCodePoints17WithNothingSafe = getNumSafeCodePoints(scp17WithNothingSafe)
      const numSafeCodePoints17WithEverythingSafe = getNumSafeCodePoints(scp17WithEverythingSafe)

      expect(numSafeCodePoints17WithNothingSafe).toBeLessThan(numSafeCodePoints17)
      expect(numSafeCodePoints17).toBeLessThan(numSafeCodePoints17WithEverythingSafe)
    })
  })
})
